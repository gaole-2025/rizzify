generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model User {
  id        String           @id @default(uuid())
  email     String           @unique
  name      String?
  avatarUrl String?
  authProv  String           @default("google")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  audits    AuditLog[]       @relation("actor")
  quotas    DailyQuota[]
  tickets   FeedbackTicket[]
  payments  Payment[]
  tasks     Task[]
  uploads   Upload[]

  @@index([createdAt(sort: Desc)])
  @@schema("public")
}

model Upload {
  id          String   @id @default(uuid())
  userId      String
  filename    String
  contentType String
  sizeBytes   BigInt
  width       Int
  height      Int
  objectKey   String
  createdAt   DateTime @default(now())
  task        Task?    @relation("UploadTask")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@schema("public")
}

model Task {
  id              String           @id @default(uuid())
  userId          String
  uploadId        String           @unique
  plan            Plan
  gender          Gender
  status          TaskStatus
  progress        Int?
  etaSeconds      Int?
  errorCode       String?
  errorMessage    String?
  idempotencyKey  String?
  createdAt       DateTime         @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  style           String?          @default("classic")
  taskAudits      AuditLog[]       @relation("taskAudit")
  feedbackTickets FeedbackTicket[] @relation("TaskFeedback")
  photos          Photo[]
  upload          Upload           @relation("UploadTask", fields: [uploadId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, idempotencyKey])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@schema("public")
}

model Photo {
  id           String    @id @default(uuid())
  taskId       String
  section      Section
  objectKey    String
  originalName String?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  deletedAt    DateTime?
  width        Int?
  height       Int?
  mime         String?
  sizeBytes    BigInt?
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, section, createdAt(sort: Desc)])
  @@index([expiresAt])
  @@index([deletedAt])
  @@schema("public")
}

model Payment {
  id          String    @id @default(uuid())
  userId      String
  plan        Plan
  amountUsd   Decimal   @db.Decimal(10, 2)
  provider    String
  status      PayStatus
  providerRef String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@schema("public")
}

model FeedbackTicket {
  id             String       @id
  userId         String
  recentTaskId   String?
  message        String
  screenshotUrls String[]
  email          String?
  status         TicketStatus @default(new)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  recentTask     Task?        @relation("TaskFeedback", fields: [recentTaskId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@schema("public")
}

model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String?
  action      String
  targetType  String
  targetId    String
  note        String?
  createdAt   DateTime @default(now())
  actor       User?    @relation("actor", fields: [actorUserId], references: [id])
  task        Task     @relation("taskAudit", fields: [targetId], references: [id])

  @@index([targetType, targetId, createdAt(sort: Desc)])
  @@schema("public")
}

model DailyQuota {
  userId    String
  dayUtc    DateTime @db.Date
  usedCount Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, dayUtc])
  @@schema("public")
}

model Health {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  @@schema("public")
}

enum Plan {
  free
  start
  pro

  @@schema("public")
}

enum Gender {
  male
  female

  @@schema("public")
}

enum TaskStatus {
  queued
  running
  done
  error

  @@schema("public")
}

enum Section {
  uploaded
  free
  start
  pro

  @@schema("public")
}

enum PayStatus {
  pending
  succeeded
  failed
  refunded

  @@schema("public")
}

enum TicketStatus {
  new
  in_progress
  resolved
  rejected

  @@schema("public")
}
